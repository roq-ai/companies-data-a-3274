generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model credit_limit {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  limit_amount Int
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model data_filter {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filter_name String   @db.VarChar(255)
  filter_type String   @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model export_data {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  export_name String   @db.VarChar(255)
  export_type String   @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model graphic {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  graphic_name String   @db.VarChar(255)
  graphic_type String   @db.VarChar(255)
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?  @db.VarChar(255)
  credit_limit  Int?
  data_uploaded Boolean? @default(false)
  name          String   @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  user_id       String   @db.Uuid
  tenant_id     String   @db.VarChar(255)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  credit_limit credit_limit[]
  data_filter  data_filter[]
  export_data  export_data[]
  graphic      graphic[]
  organization organization[]
}
